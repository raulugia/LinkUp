// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int              @id @default(autoincrement())
  firebaseUid       String
  first_name        String
  last_name         String
  email             String           @unique
  status            Status           @default(OFFLINE)
  sentRequests      FriendRequest[]  @relation("Sender")
  receivedRequests  FriendRequest[]  @relation("Receiver")
  friendships1      Friendship[]     @relation("FriendshipUser1")
  friendships2      Friendship[]     @relation("FriendshipUser2")
  blocksInitiated   Block[]          @relation("Blocker")
  blocksReceived    Block[]          @relation("Blocked")
  conversations     Conversation[]  
  sentMessages      Message[]        @relation("MessageSender")
}

enum Status {
  ONLINE
  BUSY
  AWAY
  OFFLINE
}

model FriendRequest {
  id             Int   @id @default(autoincrement())
  sender         User @relation("Sender", fields:[senderId], references:[id])
  senderId       Int
  receiver       User @relation("Receiver", fields:[receiverId], references:[id])
  receiverId     Int
  status         RequestStatus @default(PENDING)
  createdAt      DateTime @default(now())
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friendship {
  id             Int   @id @default(autoincrement())
  user1          User  @relation("FriendshipUser1", fields: [user1Id], references: [id])
  user1Id        Int
  user2          User  @relation("FriendshipUser2", fields: [user2Id], references: [id])
  user2Id        Int
  createdAt      DateTime @default(now())
}

model Block {
  id        Int      @id @default(autoincrement())
  blocker   User     @relation("Blocker", fields: [blockerId], references: [id])
  blockerId Int
  blocked   User     @relation("Blocked", fields: [blockedId], references: [id])
  blockedId Int
  createdAt DateTime @default(now())
}

model Conversation {
  id           Int       @id @default(autoincrement())
  participants User[] 
  messages     Message[] 
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id             Int           @id @default(autoincrement())
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  conversationId Int
  sender         User          @relation("MessageSender", fields: [senderId], references: [id])
  senderId       Int
  content        String
  createdAt      DateTime      @default(now())
}